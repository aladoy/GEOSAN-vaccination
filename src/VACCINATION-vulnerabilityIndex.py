#LIBRARIES
#Basic
import pandas as pd
import numpy as np
#Database
import getpass
from sqlalchemy import create_engine
import psycopg2 as ps
#Spatial
import geopandas as gpd

#CONNECT TO DB
pw=getpass.getpass() #Ask for user password
engine=create_engine("postgresql+psycopg2://aladoy:{}@localhost/geosan".format(pw)) #Create SQLAlchemy engine
conn=ps.connect("dbname='geosan' user='aladoy' host='localhost' password='{}'".format(pw)) #Create a connection object
cursor=conn.cursor() #Create a cursor object


#VULNERABILITY INDEX AT THE NPA LEVEL

#EXTRACT INDICATORS FROM GEOSAN DB
sql_npa="SELECT lcid, ptot, pt_stops, all_vacc_ctrs, nrst_vacc_ctr_dist, ciqmd, rpcsp3, rp65m, opla, covid19_cases, vaccination FROM vaccination.ind_npa"
ind_npa=pd.read_sql(sql_npa,conn)

#DICHOTOMIZE INDICATORS ACCORDING TO A SPECIFIC LEVEL (USUALLY THE MEDIAN OF THE DATASET)
#   pt_stops: 1 if < median()
print('pt_stops median:',ind_npa.pt_stops.median())
ind_npa['pt_stops'] = np.where(ind_npa.pt_stops < ind_npa.pt_stops.median(), 1, 0)
#   all_vacc_ctrs: 1 if = 0
print('number of all_vacc_ctrs==0:',ind_npa[ind_npa.all_vacc_ctrs == 0].shape[0])
ind_npa['all_vacc_ctrs'] = np.where(ind_npa.all_vacc_ctrs == 0, 1, 0)
#   nrst_vacc_ctr_dist: 1 if > median()
print('nrst_vacc_ctr_dist median:',ind_npa.nrst_vacc_ctr_dist.median())
ind_npa['nrst_vacc_ctr_dist'] = np.where(ind_npa.nrst_vacc_ctr_dist > ind_npa.nrst_vacc_ctr_dist.median(), 1, 0)
#   ciqmd: 1 if < 0.6*median()
print('60% of ciqmd median:',ind_npa.ciqmd.median()*0.6)
ind_npa['ciqmd'] = np.where(ind_npa.ciqmd < ind_npa.ciqmd.median()*0.6, 1, 0)
#   rpcsp3: 1 if > median()
print('rpcsp3 median:',ind_npa.rpcsp3.median())
ind_npa['rpcsp3'] = np.where(ind_npa.rpcsp3 > ind_npa.rpcsp3.median(), 1, 0)
#   rp65m: 1 if > median()
print('rp65m median:',ind_npa.rp65m.median())
ind_npa['rp65m'] = np.where(ind_npa.rp65m > ind_npa.rp65m.median(), 1, 0)
#   opla: 1 if > median()
print('opla median:',ind_npa.opla.median())
ind_npa['opla'] = np.where(ind_npa.opla > ind_npa.opla.median(), 1, 0)
#   covid19_cases: 1 if < median()
print('covid19_cases median:',ind_npa.covid19_cases.median())
ind_npa['covid19_cases'] = np.where(ind_npa.covid19_cases < ind_npa.covid19_cases.median(), 1, 0)
#   vaccination: 1 if < median()
print('vaccination median:',ind_npa.vaccination.median())
ind_npa['vaccination'] = np.where(ind_npa.vaccination < ind_npa.vaccination.median(), 1, 0)

#CREATE VULNERABILITY SCORE
ind_npa['vulnerability_score']=1*ind_npa.pt_stops+1*ind_npa.all_vacc_ctrs+2*ind_npa.nrst_vacc_ctr_dist+\
4*ind_npa.ciqmd+3*ind_npa.rpcsp3+2*ind_npa.rp65m+3*ind_npa.opla+1*ind_npa.covid19_cases+2*ind_npa.vaccination

#EXTRACT NPA GEOMETRY FROM GEOSAN DB
npa_geom=gpd.read_postgis("SELECT lcid, locality, geometry FROM npa",conn,geom_col='geometry')
#Merge with the indicators
ind_npa_geom=npa_geom.merge(ind_npa,how='left',on='lcid')

#SAVE FILE
ind_npa_geom.to_file(r'./Vaccination mobile @ DGS/results/npa_vulnerability.geojson',driver='GeoJSON')


#VULNERABILITY INDEX AT THE HA LEVEL

#EXTRACT INDICATORS FROM GEOSAN DB
sql_reli="SELECT reli, b19btot, ciqmd, rpcsp3, p65plus, opla FROM vaccination.ind_reli"
ind_reli=pd.read_sql(sql_reli,conn)

#DICHOTOMIZE INDICATORS ACCORDING TO A SPECIFIC LEVEL (USUALLY THE MEDIAN OF THE DATASET)
#   ciqmd: 1 if < 0.6*median()
print('60% of ciqmd median:',ind_reli.ciqmd.median()*0.6)
ind_reli['ciqmd'] = np.where(ind_reli.ciqmd < ind_reli.ciqmd.median()*0.6, 1, 0)
#   rpcsp3: 1 if > median()
print('rpcsp3 median:',ind_reli.rpcsp3.median())
ind_reli['rpcsp3'] = np.where(ind_reli.rpcsp3 > ind_reli.rpcsp3.median(), 1, 0)
#   p65plus: 1 if > median()
print('p65plus median:',ind_reli.p65plus.median())
ind_reli['p65plus'] = np.where(ind_reli.p65plus > ind_reli.p65plus.median(), 1, 0)
#   opla: 1 if > median()
print('opla median:',ind_reli.opla.median())
ind_reli['opla'] = np.where(ind_reli.opla > ind_reli.opla.median(), 1, 0)

#CREATE VULNERABILITY SCORE
ind_reli['vulnerability_score']=4*ind_reli.ciqmd+3*ind_reli.rpcsp3+2*ind_reli.p65plus+3*ind_reli.opla

#EXTRACT NPA GEOMETRY FROM GEOSAN DB
reli_geom=gpd.read_postgis("SELECT reli, geometry FROM statpop",conn,geom_col='geometry')
#Merge with the indicators
ind_reli_geom=reli_geom.merge(ind_reli,how='left',on='reli')

#SAVE FILE
ind_reli_geom.to_file(r'./Vaccination mobile @ DGS/results/reli_vulnerability.geojson',driver='GeoJSON')
